# Suggested modules
###module load clang (used for some libraries, not for running)

#module purge
#module load nvhpc/21.2
#module load openmpi/4.0.5-cuda
#module load cuda/11.2
#  Also, add this to your job script:
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/projappl/project_2002873/libraries/clang/10.0.0/boost/lib

#======== Vectorization ==========
#Set vector backend type for vlasov solvers, sets precision and length.
#Options:
# AVX:	    VEC4D_AGNER, VEC4F_AGNER, VEC8F_AGNER
# AVX512:   VEC8D_AGNER, VEC16F_AGNER
# Fallback: VEC4D_FALLBACK, VEC4F_FALLBACK, VEC8F_FALLBACK

ifeq ($(DISTRIBUTION_FP_PRECISION),SPF)
#Single-precision
	VECTORCLASS = VEC8F_FALLBACK
else
#Double-precision
	VECTORCLASS = VEC4D_FALLBACK
endif

#======= Compiler and compilation flags =========
# NOTES on compiler flags:
# CXXFLAGS is for compiler flags, they are always used
# MATHFLAGS are for special math etc. flags, these are only applied on solver functions
# LDFLAGS flags for linker

#-DNO_WRITE_AT_ALL:  Define to disable write at all to
#                    avoid memleak (much slower IO)
#-DMPICH_IGNORE_CXX_SEEK: Ignores some multiple definition
#                         errors that come up when using
#                         mpi.h in c++ on Cray

#FLAGS =
CC = mpicc
CXX = mpic++
NVCC = nvcc
CUDAFLAGS = -gencode arch=compute_80,code=sm_80 -std=c++11 -lineinfo,-G
testpackage: CUDAFLAGS = -gencode arch=compute_80,code=sm_80 -std=c++11 -lineinfo,-G
CMP = mpic++
LNK = mpic++

#brand definition:
CC_BRAND = nvhpc
CC_BRAND_VERSION = 21.2

# activate OpenACC support:
# add flags: -gpu=cc80 -acc

# activate OpenMP offloading support:
# add flags: -gpu=cc80 -mp=gpu

# identify nvcc warnings: -Xcudafe --display_error_number
# http://www.ssl.berkeley.edu/~jimm/grizzly_docs/SSL/opt/intel/cc/9.0/lib/locale/en_US/mcpcom.msg
# suppress nvcc warnings: -Xcudafe "--diag_suppress=code_is_unreachable,set_but_not_used,declared_but_not_referenced,unrecognized_pragma,loop_not_reachable,initialization_not_reachable"
# equal to: -Xcudafe "--diag_suppress=111,550,177"

# small loop unrolling is done automatically with nvcc #-std=c++17

CXXFLAGS += -g -O3 -fopenmp -W -Wall -march=native -mfma -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -Xcudafe "--diag_suppress=111,550,177,1676,128,185"
testpackage: CXXFLAGS = -g -O2 -fopenmp -W -Wall -march=native -mfma -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1

MATHFLAGS = -use_fast_math
testpackage: MATHFLAGS = 

LDFLAGS =  -lrt -L/appl/spack/v016/install-tree/gcc-4.8.5/nvhpc-21.2-l6xyb4/Linux_x86_64/21.2/cuda/11.2/lib64
# -ta=tesla:lineinfo,keepbin,keepgpu,keepptx
LIB_MPI = -lgomp

#======== PAPI ==========
#Add PAPI_MEM define to use papi to report memory consumption?
# CXXFLAGS += -DPAPI_MEM
# testpackage: CXXFLAGS += -DPAPI_MEM

#======== Allocator =========
# Use jemalloc instead of system malloc to reduce memory fragmentation https://github.com/jemalloc/jemalloc
# Configure jemalloc with  --with-jemalloc-prefix=je_ when installing it
CXXFLAGS += -DUSE_JEMALLOC -DJEMALLOC_NO_DEMANGLE
testpackage: CXXFLAGS += -DUSE_JEMALLOC -DJEMALLOC_NO_DEMANGLE

#======== Libraries ===========

LIBRARY_PREFIX = /projappl/project_2002873/libraries/nvhpc/21.2
LIBRARY_PREFIX2 = /projappl/project_2002873/libraries/clang/10.0.0

#LIB_PAPI = -I/$(LIBRARY_PREFIX2)/papi/include -lpapi
#INC_PAPI = -L/$(LIBRARY_PREFIX2)/papi/lib

INC_BOOST = -I/$(LIBRARY_PREFIX2)/boost/include
LIB_BOOST = -L$(LIBRARY_PREFIX2)/boost/lib -lboost_program_options -Wl,-rpath=$(LIBRARY_PREFIX2)/boost/lib

INC_ZOLTAN = -I/$(LIBRARY_PREFIX)/zoltan/include
LIB_ZOLTAN = -L/$(LIBRARY_PREFIX)/zoltan/lib -lzoltan

INC_JEMALLOC = -I/$(LIBRARY_PREFIX2)/jemalloc/include
LIB_JEMALLOC = -L$(LIBRARY_PREFIX2)/jemalloc/lib -ljemalloc -Wl,-rpath=$(LIBRARY_PREFIX2)/jemalloc/lib

INC_VLSV = -I$(LIBRARY_PREFIX)/vlsv
LIB_VLSV = -L$(LIBRARY_PREFIX)/vlsv -lvlsv -Wl,-rpath=$(LIBRARY_PREFIX)/vlsv/lib

LIB_PROFILE = -L$(LIBRARY_PREFIX)/phiprof/lib -lphiprof -Wl,-rpath=$(LIBRARY_PREFIX)/phiprof/lib
INC_PROFILE = -I$(LIBRARY_PREFIX)/phiprof/include

#LIB_CUDA = -L/usr/local/cuda/lib64 -lcuda -lcudart

#header libraries
INC_EIGEN = -I$(LIBRARY_PREFIX)/eigen
INC_DCCRG = -I$(LIBRARY_PREFIX)/dccrg
INC_FSGRID = -I$(LIBRARY_PREFIX)/fsgrid
